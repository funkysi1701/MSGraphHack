@page "/fetchdata"
@using Azure.Identity
@using Microsoft.Graph
@using Microsoft.Identity.Web
@using BlazorCalendar
@using BlazorCalendar.Models
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<PageTitle>What is in my calendar</PageTitle>

<h1>What is in my calendar</h1>

<div class="d-flex flex-row mb-2">
    <button type="button" @onclick="@(m => ClicMonthNavigate(-1))">🔼</button>
    <button type="button" @onclick="@(m => ClicMonthNavigate(1))" class="me-2">🔽</button>
    <input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
    <select @bind="@PriorityDisplay" class="me-2">
        <option value="@PriorityLabel.Code" selected>priority Code</option>
        <option value="@PriorityLabel.Caption">priority Caption</option>
    </select>
    <div>
        <input type="checkbox" @bind="draggable" id="is-draggable" />
        <label for="is-draggable">Draggable</label>
    </div>
</div>

<CalendarContainer FirstDate="today" TasksList="TasksList.ToArray()" DisplayedView="DisplayedView.Monthly">
    <MonthlyView PriorityDisplay="@PriorityDisplay"
                 OutsideCurrentMonthClick="OutsideCurrentMonthClick"
                 TaskClick="TaskClick" DayClick="DayClick"
                 Draggable="@draggable" DragStart="DragStart" DropTask="DropTask" />
</CalendarContainer>

<br />
<div class="console">@fakeConsole</div>

@if (events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        @foreach (var first in events)
        {
            <tr>
                <td>@first.Subject</td>
                <td>@first.Start.DateTime</td>
                <td>@first.End.DateTime</td>
            </tr>
        }
    </table>
}



@code {
    private DateTime today = DateTime.Today;
    private BlazorCalendar.PriorityLabel PriorityDisplay = PriorityLabel.Code;
    private bool draggable = true;
    private List<Tasks> TasksList;
    private ICalendarEventsCollectionPage? events;
    private string fakeConsole = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TasksList = new();
        }
        catch (Exception e)
        {

        }
        try
        {
            await DoMSGraphStuff();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    protected async Task DoMSGraphStuff()
    {
        events = await GraphServiceClient.Me.Calendar.Events
            .Request()
            .GetAsync();
    }

    private void ChangeFirstDate(string value)
    {
        if (string.IsNullOrEmpty(value)) return;
        today = DateTime.Parse(value.ToString());
    }

    private void ClicMonthNavigate(int monthToAdd)
    {
        today = today.AddMonths(monthToAdd);
    }

    private void OutsideCurrentMonthClick(int MonthAdded)
    {
        today = today.AddMonths(MonthAdded);
    }

    private void TaskClick(ClickTaskParameter clickTaskParameter)
    {
        fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
    }

    private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
    {
        fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
    }

    private void DragStart(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
    }

    private void DropTask(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

        Tasks taskDropped = TasksList.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

        var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
        taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
        taskDropped.DateStart = dragDropParameter.Day;
    }
}
